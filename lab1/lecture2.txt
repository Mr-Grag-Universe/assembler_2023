Определение инициализированных данных:
db, dw, dd, dq
mas db 1, 2, 3, 4, 5
mesg db 'Hello, world!'
err db 'e', 'r', 'r', 'o', 'r'
a dw 1234h
b dq 0xff00ff00ff00ff00

Определение константы:
a equ 12
b equ 'abc'
c equ $-_start

Определение неинициализированных данных (резервирование):
resb, resw, resd, resq
a resb 200
b resw 100
c resd 10
d resq 1000

Пересылка данных:
mov op1, op2
Обмен данных:
хchg op1, op2 (нет непосредственной адресации)
Обмен байтов в 64-  или 32-разрядном регистре:
bswap op

Конвертирование данных:
cbw (al –> ax)
cwde (ax –> eax)
cwd (ax –> dx:ax)
cdq (eax –> edx:eax)
cdqe (eax -> rax)
cqo (rax -> rdx:rax)

Расширение нулем
movzx op1, op2

Расширение знаком
movsx op1, op2

Вычисление смещения операнда:
lea op1, op2

Поместить значение в стек:
push op
Извлечь значение из стека:
pop op
RSP всегда указывает на вершину стека (последнее записанное в стек значение), стек растет в сторону уменьшения адреса.

Арифметические команды устанавливают соответствующие флаги: OF, SF, ZF, AF, CF, PF.

CF – используется для анализа результата беззнаковой операции (перенос).
SF, OF – используются для анализа результата знаковой операции (знак, переполнение).
ZF – используются для анализа результата любой операции (нуль).

Сложение:
add op1, op2
Вычитание:
sub op1, op2
Сложение с обменом:
xadd op1, op2 (только первый операнд может быть ячейкой памяти)

Сложение c переносом:
adc op1, op2

Вычитание с займом:
sbb op1, op2

Увеличение операнда на единицу:
inc op (не влияет на флаг CF)
Уменьшение операнда на единицу:
dec op (не влияет на флаг CF)
Изменение знака числа:
neg op (если операнд – нуль, то CF сбрасывается, иначе устанавливается)

